'use strict';


let maps = [

	[
		[ , , ,0,0,0,0],
		 [ , ,0,0,0,0,0],
		  [ ,0,0,0,0,0,0],
		   [0,0,0,0,0,0,0],
		    [0,0,0,0,0,0  ],
		     [0,0,0,0,0    ],
		      [0,0,0,0      ],
	],
	[
		[ , , ,0,0,0,0],
		 [ , ,0,0,0,0,0],
		  [ ,0,0,0,0,0,0],
		   [0,0,0, ,0,0,0],
		    [0,0,0,0,0,0  ],
		     [0,0,0,0,0    ],
		      [0,0,0,0      ],
	],
	[
		[ , , , , , , ,0],
		 [ , , , , , ,0,0],
		  [ , , , , ,0,0,0],
		   [ , , , ,0,0,0,0],
		    [ , , ,0,0,0,0,0],
		     [ , ,0,0,0,0,0,0],
		      [ ,0,0,0,0,0,0,0],
		       [0,0,0,0,0,0,0,0],
	],
	[
		[ , , , , , , ,0],
		 [ , , , , , ,0,0],
		  [ , , , , ,0,0,0],
		   [ , , , ,0,0,0,0],
		    [ , , ,0,0, ,0,0],
		     [ , ,0,0,0,0,0,0],
		      [ ,0,0,0,0,0,0,0],
		       [0,0,0,0,0,0,0,0],
	],
	// [
	// 	[ , , , ,0,0,0,0,0],
	// 	 [ , , ,0,0,0,0,0,0],
	// 	  [ , ,0,0,0,0,0,0,0],
	// 	   [ ,0,0,0, , ,0,0,0],
	// 	    [0,0,0, , , ,0,0,0],
	// 	     [0,0,0, , ,0,0,0  ],
	// 	      [0,0,0,0,0,0,0    ],
	// 	       [0,0,0,0,0,0      ],
	// 	        [0,0,0,0,0        ],
	// ],
];



class Grid {
	constructor() {
		let map = maps[Math.random() * maps.length | 0];

		let grid = this;
		let key = 0;

		for (let r = 0; r < map.length; r++) {
			grid[r] = {};
			for (let q = 0; q < map[r].length; q++) {
				if (map[r][q] == null) continue;

				let near = [
					grid[r-1] && grid[r-1][q] && grid[r-1][q].type,
					grid[r-1] && grid[r-1][q+1] && grid[r-1][q+1].type,
					grid[r][q-1] && grid[r][q-1].type,
				];

				let type;
				do {
					type = Math.random() * 6 | 0;
				} while (near.includes(type));

				grid[r][q] = { type, r, q, key };
				key++;
			}
		}
	}
}


module.exports = Grid;
